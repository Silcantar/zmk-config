/ {
    behaviors {
		bspc_del: backspace_delete {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp BACKSPACE>, <&kp DELETE>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		
		comm_scln: comma_semicolon {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&ht3 LC(A) COMMA>, <&ht3 LC(A) SEMICOLON>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		dot_cln: dot_colon {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp DOT>, <&kp COLON>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		
		under_minus: underscore_minus {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&ht4 PRINTSCREEN UNDERSCORE>, <&ht4 PRINTSCREEN MINUS>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		quote_tds: quote_tap_dances {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&td_squote>, <&td_dquote>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		brack: brackets {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&ht3 LALT LEFT_BRACKET>, <&ht3 LALT RIGHT_BRACKET>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		brace: braces {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&ht2 LCTL LEFT_BRACE>, <&ht2 LCTL RIGHT_BRACE>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		paren: parentheses {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&ht1 LSFT LEFT_PARENTHESIS>, <&ht1 LSFT RIGHT_PARENTHESIS>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		angle: anglebrackets {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&ht4 LGUI LESS_THAN>, <&ht4 LGUI GREATER_THAN>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		amp_intb: ampersand_interrobang {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp AMPS>, <&intb>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		excl_iexcl: exclamation_inverted_exclamation {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp EXCL>, <&iexcl>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		caret_deg: caret_degree {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp CARET>, <&deg>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		percent_euro: percent_euro {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp PERCENT>, <&euro>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		grave_acute: grave_acute {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp GRAVE>, <&acute>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		hash_gbp: hash_gbp {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp HASH>, <&gbp>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		dollar_cent: dollar_cent {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp DOLLAR>, <&cent>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		qmark_iques: question_inverted_question {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp QMARK>, <&iques>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		equal_neq: equal_not_equal {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp EQUAL>, <&neq>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		at_tilde: at_tilde {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp AT>, <&kp TILDE>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		n8_inf: n8_infinity {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp N8>, <&inf>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		n9_micro: n9_micro {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp N9>, <&micro>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		star_mult: star_multiplication {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp STAR>, <&mult>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		n7_sqrt: n7_square_root {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp N7>, <&sqrt>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		n5_E: n5_E {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&ht2 RCTL N5>, <&kp LS(E)>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		n6_F: n6_F {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&ht3 LALT N6>, <&kp LS(F)>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		n0_000: n0_000 {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&ht4 RGUI N0>, <&t0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		slash_div: slash_division_sign {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp SLASH>, <&div>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		n4_D: n4_D {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp N4>, <&kp LS(D)>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		n2_B: n2_B {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp N2>, <&kp LS(B)>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		n3_C: n3_C {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp N3>, <&kp LS(C)>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		plus_plmn: plus_plus_minus {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp PLUS>, <&plmn>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		n1_A: n1_A {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp N1>, <&kp LS(A)>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
	};
};